import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from scipy.stats import zscore
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from scipy.stats import zscore
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.metrics import mean_squared_error
import mlflow
import io
from sklearn.model_selection import KFold



import os
from mlflow.tracking import MlflowClient
def mlflow_input():
    st.title("MLflow DAGsHub Tracking v·ªõi Streamlit")

    # C·∫•u h√¨nh DAGsHub MLflow URI
    DAGSHUB_MLFLOW_URI = "https://dagshub.com/TonThatTruongVu/TITANIC_APP_Linear.mlflow"
    mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)

    # Ki·ªÉm tra v√† kh·ªüi t·∫°o gi√° tr·ªã session_state n·∫øu ch∆∞a t·ªìn t·∫°i
    if "mlflow_url" not in st.session_state:
        st.session_state["mlflow_url"] = DAGSHUB_MLFLOW_URI

    # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng (N√äN s·ª≠ d·ª•ng file .env thay v√¨ hardcode)
    os.environ["MLFLOW_TRACKING_USERNAME"] = "TonThatTruongVu"
    os.environ["MLFLOW_TRACKING_PASSWORD"] = "aeb2dd8b26ef573bd0bc81a57d7cd8d55f87c3df"

    # ƒê·∫∑t th√≠ nghi·ªám (n·∫øu ch∆∞a t·ªìn t·∫°i, t·ª± ƒë·ªông t·∫°o)
    experiment_name = "Linear_replication"
    mlflow.set_experiment(experiment_name)

    st.success(f"‚úÖ MLflow tracking ƒë√£ thi·∫øt l·∫≠p cho experiment: {experiment_name}")


def drop(df):
    st.subheader(" X√≥a c·ªôt d·ªØ li·ªáu")
    
    if "df" not in st.session_state:
        st.session_state.df = df  # L∆∞u v√†o session_state n·∫øu ch∆∞a c√≥

    df = st.session_state.df
    columns_to_drop = st.multiselect(" Ch·ªçn c·ªôt mu·ªën x√≥a:", df.columns.tolist())

    if st.button(" X√≥a c·ªôt ƒë√£ ch·ªçn"):
        if columns_to_drop:
            df = df.drop(columns=columns_to_drop)  # T·∫°o b·∫£n sao thay v√¨ inplace=True
            st.session_state.df = df  # C·∫≠p nh·∫≠t session_state
            st.success(f" ƒê√£ x√≥a c·ªôt: {', '.join(columns_to_drop)}")
            st.dataframe(df.head())
        else:
            st.warning(" Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c·ªôt ƒë·ªÉ x√≥a!")

    return df

def choose_label(df):
    st.subheader(" Ch·ªçn c·ªôt d·ª± ƒëo√°n (label)")

    if "target_column" not in st.session_state:
        st.session_state.target_column = None

    selected_label = st.selectbox(" Ch·ªçn c·ªôt d·ª± ƒëo√°n", df.columns, 
                                  index=df.columns.get_loc(st.session_state.target_column) if st.session_state.target_column else 0)

    X, y = df.drop(columns=[selected_label]), df[selected_label]  # M·∫∑c ƒë·ªãnh
    
    if st.button(" X√°c nh·∫≠n Label"):
        st.session_state.target_column = selected_label
        X, y = df.drop(columns=[selected_label]), df[selected_label]
        st.success(f" ƒê√£ ch·ªçn c·ªôt: **{selected_label}**")
    
    return X, y

import streamlit as st
import pandas as pd
import mlflow
from sklearn.model_selection import train_test_split

def train_test_size():
    if "df" not in st.session_state:
        st.error("‚ùå D·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c t·∫£i l√™n!")
        st.stop()
    
    df = st.session_state.df  # L·∫•y d·ªØ li·ªáu t·ª´ session_stat
    X, y = choose_label(df)
    
    st.subheader("üìä Chia d·ªØ li·ªáu Train - Validation - Test")   
    
    test_size = st.slider("üìå Ch·ªçn % d·ªØ li·ªáu Test", 10, 50, 20)
    remaining_size = 100 - test_size
    val_size = st.slider("üìå Ch·ªçn % d·ªØ li·ªáu Validation (trong ph·∫ßn Train)", 0, 50, 15)

    st.write(f"üìå **T·ª∑ l·ªá ph√¢n chia:** Test={test_size}%, Validation={val_size}%, Train={remaining_size - val_size}%")

    

    if st.button("‚úÖ X√°c nh·∫≠n Chia"):
        # st.write("‚è≥ ƒêang chia d·ªØ li·ªáu...")

        stratify_option = y if y.nunique() > 1 else None
        X_train_full, X_test, y_train_full, y_test = train_test_split(
            X, y, test_size=test_size/100, stratify=stratify_option, random_state=42
        )

        stratify_option = y_train_full if y_train_full.nunique() > 1 else None
        X_train, X_val, y_train, y_val = train_test_split(
            X_train_full, y_train_full, test_size=val_size / (100 - test_size),
            stratify=stratify_option, random_state=42
        )

        # st.write(f"üìä K√≠ch th∆∞·ªõc t·∫≠p Train: {X_train.shape[0]} m·∫´u")
        # st.write(f"üìä K√≠ch th∆∞·ªõc t·∫≠p Validation: {X_val.shape[0]} m·∫´u")
        # st.write(f"üìä K√≠ch th∆∞·ªõc t·∫≠p Test: {X_test.shape[0]} m·∫´u")

        # L∆∞u v√†o session_state
        st.session_state.X_train = X_train
        st.session_state.X_val = X_val  # ‚úÖ Th√™m X_val
        st.session_state.X_test = X_test
        st.session_state.y_train = y_train
        st.session_state.y_val = y_val  # ‚úÖ Th√™m y_val
        st.session_state.y_test = y_test
        st.session_state.y = y
        st.session_state.X_train_shape = X_train.shape[0]
        st.session_state.X_val_shape = X_val.shape[0]
        st.session_state.X_test_shape = X_test.shape[0]
        summary_df = pd.DataFrame({
            "T·∫≠p d·ªØ li·ªáu": ["Train", "Validation", "Test"],
            "S·ªë l∆∞·ª£ng m·∫´u": [X_train.shape[0], X_val.shape[0], X_test.shape[0]]
        })
        st.table(summary_df)

        # **Log d·ªØ li·ªáu v√†o MLflow**



def xu_ly_gia_tri_thieu(df):
    if "df" not in st.session_state:
        st.session_state.df = df.copy()

    df = st.session_state.df

    # T√¨m c·ªôt c√≥ gi√° tr·ªã thi·∫øu
    missing_cols = df.columns[df.isnull().any()].tolist()
    if not missing_cols:
        st.success("‚úÖ D·ªØ li·ªáu kh√¥ng c√≥ gi√° tr·ªã thi·∫øu!")
        return df

    selected_col = st.selectbox("üìå Ch·ªçn c·ªôt ch·ª©a gi√° tr·ªã thi·∫øu:", missing_cols)
    method = st.radio("üîß Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω:", ["Thay th·∫ø b·∫±ng Mean", "Thay th·∫ø b·∫±ng Median", "X√≥a gi√° tr·ªã thi·∫øu"])
    

    
    if df[selected_col].dtype in ['int64', 'float64'] and method == "Thay th·∫ø b·∫±ng Mean":
        df[selected_col].fillna(df[selected_col].mean(), inplace=True)

      
    if df[selected_col].dtype in ['int64', 'float64'] and method == "Thay th·∫ø b·∫±ng Median":
        df[selected_col].fillna(df[selected_col].median(), inplace=True)
        
        
        
    if st.button(" X·ª≠ l√Ω gi√° tr·ªã thi·∫øu"):
        if df[selected_col].dtype == 'object':
            

            if method == "Thay th·∫ø b·∫±ng Mean":
                unique_values = df[selected_col].dropna().unique()
                encoding_map = {val: idx for idx, val in enumerate(unique_values)}
                df[selected_col] = df[selected_col].map(encoding_map)
                
                df[selected_col] = df[selected_col].fillna(df[selected_col].mean())
            elif method == "Thay th·∫ø b·∫±ng Median":
                
                unique_values = df[selected_col].dropna().unique()
                encoding_map = {val: idx for idx, val in enumerate(unique_values)}
                df[selected_col] = df[selected_col].map(encoding_map)
            
                df[selected_col] = df[selected_col].fillna(df[selected_col].median())
            elif method == "X√≥a gi√° tr·ªã thi·∫øu":
                df = df.dropna(subset=[selected_col])
        else:
            if method == "Thay th·∫ø b·∫±ng Mean":
                df[selected_col] = df[selected_col].fillna(df[selected_col].mean())
            elif method == "Thay th·∫ø b·∫±ng Median":
                df[selected_col] = df[selected_col].fillna(df[selected_col].median())
            elif method == "X√≥a gi√° tr·ªã thi·∫øu":
                df = df.dropna(subset=[selected_col])
    
        st.session_state.df = df
        st.success(f" ƒê√£ x·ª≠ l√Ω gi√° tr·ªã thi·∫øu trong c·ªôt `{selected_col}`")

    st.dataframe(df.head())
    return df





import pandas as pd
import streamlit as st
from sklearn.preprocessing import LabelEncoder


def chuyen_doi_kieu_du_lieu(df):
    st.subheader(" Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")

    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

    if not categorical_cols:
        st.success(" Kh√¥ng c√≥ c·ªôt d·∫°ng chu·ªói c·∫ßn chuy·ªÉn ƒë·ªïi!")
        return df

    selected_col = st.selectbox(" Ch·ªçn c·ªôt ƒë·ªÉ chuy·ªÉn ƒë·ªïi:", categorical_cols)
    unique_values = df[selected_col].unique()
     # Ki·ªÉm tra n·∫øu c·ªôt ch·ª©a d·ªØ li·ªáu nh∆∞ "C85", "B42" ‚Üí √Åp d·ª•ng Label Encoding
    if all(any(char.isdigit() for char in str(val)) for val in unique_values):
        st.info("üîÑ C·ªôt ch·ª©a d·ªØ li·ªáu d·∫°ng ch·ªØ + s·ªë ‚Üí √Åp d·ª•ng Label Encoding.")

        # √Åp d·ª•ng Label Encoding
        label_encoder = LabelEncoder()
        df[selected_col] = label_encoder.fit_transform(df[selected_col])

        # L∆∞u v√†o session_state
        st.session_state.df = df
        st.success(f"‚úÖ ƒê√£ m√£ h√≥a c·ªôt `{selected_col}` th√†nh s·ªë duy nh·∫•t (Label Encoding).")
        st.rerun()  

    # Kh·ªüi t·∫°o session_state n·∫øu ch∆∞a c√≥
    if "text_inputs" not in st.session_state:
        st.session_state.text_inputs = {}

    if "mapping_dicts" not in st.session_state:
        st.session_state.mapping_dicts = []

    mapping_dict = {}
    input_values = []  # Danh s√°ch ƒë·ªÉ ki·ªÉm tra tr√πng l·∫∑p
    has_duplicate = False  # Bi·∫øn ki·ªÉm tra tr√πng l·∫∑p

    if len(unique_values) < 5:
        for val in unique_values:
            key = f"{selected_col}_{val}"
            if key not in st.session_state.text_inputs:
                st.session_state.text_inputs[key] = ""

            new_val = st.text_input(f" Nh·∫≠p gi√° tr·ªã thay th·∫ø cho `{val}`:", 
                                    key=key, 
                                    value=st.session_state.text_inputs[key])

            # C·∫≠p nh·∫≠t session_state v·ªõi gi√° tr·ªã nh·∫≠p m·ªõi
            st.session_state.text_inputs[key] = new_val
            input_values.append(new_val)

            # L∆∞u v√†o mapping_dict n·∫øu kh√¥ng tr√πng l·∫∑p
            mapping_dict[val] = new_val

        # Ki·ªÉm tra n·∫øu c√≥ gi√° tr·ªã tr√πng nhau
        duplicate_values = [val for val in input_values if input_values.count(val) > 1 and val != ""]
        if duplicate_values:
            has_duplicate = True
            st.warning(f"‚ö† Gi√° tr·ªã `{', '.join(set(duplicate_values))}` ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu l·∫ßn. Vui l√≤ng ch·ªçn s·ªë kh√°c!")

        # N√∫t button b·ªã m·ªù n·∫øu c√≥ gi√° tr·ªã tr√πng l·∫∑p
        btn_disabled = has_duplicate

        if st.button(" Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu", disabled=btn_disabled):
            # L∆∞u v√†o session_state
            column_info = {
                "column_name": selected_col,
                "mapping_dict": mapping_dict
            }
            st.session_state.mapping_dicts.append(column_info)

            df[selected_col] = df[selected_col].map(lambda x: mapping_dict.get(x, x))
            df[selected_col] = pd.to_numeric(df[selected_col], errors='coerce')

            # Reset text_inputs sau khi ho√†n th√†nh
            st.session_state.text_inputs.clear()

            st.session_state.df = df
            st.success(f" ƒê√£ chuy·ªÉn ƒë·ªïi c·ªôt `{selected_col}`")

    st.dataframe(df.head())

    return df







def chuan_hoa_du_lieu(df):
    # st.subheader("üìä Chu·∫©n h√≥a d·ªØ li·ªáu v·ªõi StandardScaler")

    # L·ªçc t·∫•t c·∫£ c√°c c·ªôt s·ªë
    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()

    # T√¨m c√°c c·ªôt nh·ªã ph√¢n (ch·ªâ ch·ª©a 0 v√† 1)
    binary_cols = [col for col in numerical_cols if df[col].dropna().isin([0, 1]).all()]

    # Lo·∫°i b·ªè c·ªôt nh·ªã ph√¢n kh·ªèi danh s√°ch c·∫ßn chu·∫©n h√≥a
    cols_to_scale = list(set(numerical_cols) - set(binary_cols))

    if not cols_to_scale:
        st.success(" Kh√¥ng c√≥ thu·ªôc t√≠nh d·∫°ng s·ªë c·∫ßn chu·∫©n h√≥a!")
        return df

    if st.button(" Th·ª±c hi·ªán Chu·∫©n h√≥a"):
        scaler = StandardScaler()
        df[cols_to_scale] = scaler.fit_transform(df[cols_to_scale])

        # L∆∞u v√†o session_state
        st.session_state.df = df

        st.success(f" ƒê√£ chu·∫©n h√≥a c√°c c·ªôt s·ªë (lo·∫°i b·ªè c·ªôt nh·ªã ph√¢n): {', '.join(cols_to_scale)}")
        st.info(f" Gi·ªØ nguy√™n c√°c c·ªôt nh·ªã ph√¢n: {', '.join(binary_cols) if binary_cols else 'Kh√¥ng c√≥'}")
        st.dataframe(df.head())

    return df

def hien_thi_ly_thuyet(df):
    st.subheader(" 10 d√≤ng ƒë·∫ßu c·ªßa d·ªØ li·ªáu g·ªëc")
    st.write(df.head(10))

                # Ki·ªÉm tra l·ªói d·ªØ li·ªáu
    st.subheader(" Ki·ªÉm tra l·ªói d·ªØ li·ªáu")

                # Ki·ªÉm tra gi√° tr·ªã thi·∫øu
    missing_values = df.isnull().sum()

                # Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p
    duplicate_count = df.duplicated().sum()

                
                
                # Ki·ªÉm tra gi√° tr·ªã qu√° l·ªõn (outlier) b·∫±ng Z-score
    outlier_count = {
        col: (abs(zscore(df[col], nan_policy='omit')) > 3).sum()
        for col in df.select_dtypes(include=['number']).columns
    }

                # T·∫°o b√°o c√°o l·ªói
    error_report = pd.DataFrame({
        'C·ªôt': df.columns,
        'Gi√° tr·ªã thi·∫øu': missing_values,
        'Outlier': [outlier_count.get(col, 0) for col in df.columns]
    })

                # Hi·ªÉn th·ªã b√°o c√°o l·ªói
    st.table(error_report)

                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng d·ªØ li·ªáu tr√πng l·∫∑p
    st.write(f" **S·ªë l∆∞·ª£ng d√≤ng b·ªã tr√πng l·∫∑p:** {duplicate_count}")            
   
    
    st.title(" Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")

    # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc
    
    st.subheader("1Ô∏è‚É£ Lo·∫°i b·ªè c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt")
    df=drop(df)
    
    st.subheader("2Ô∏è‚É£ X·ª≠ l√Ω gi√° tr·ªã thi·∫øu")
    df=xu_ly_gia_tri_thieu(df)

    st.subheader("3Ô∏è‚É£ Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")
    st.write("""
        Trong d·ªØ li·ªáu, c√≥ m·ªôt s·ªë c·ªôt ch·ª©a gi√° tr·ªã d·∫°ng ch·ªØ (category). Ta c·∫ßn chuy·ªÉn ƒë·ªïi th√†nh d·∫°ng s·ªë ƒë·ªÉ m√¥ h√¨nh c√≥ th·ªÉ x·ª≠ l√Ω.
        - **C·ªôt "Sex"**: Chuy·ªÉn th√†nh 1 (male), 0 (female).
        - **C·ªôt "Embarked"**:   Chuy·ªÉn th√†nh 1 (Q), 2 (S), 3 (C).
        """)

    df=chuyen_doi_kieu_du_lieu(df)
    
    st.subheader("4Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë")
    st.write("""
        C√°c gi√° tr·ªã s·ªë c√≥ th·ªÉ c√≥ kho·∫£ng gi√° tr·ªã kh√°c nhau, l√†m ·∫£nh h∆∞·ªüng ƒë·∫øn m√¥ h√¨nh. Ta s·∫Ω chu·∫©n h√≥a to√†n b·ªô v·ªÅ c√πng m·ªôt thang ƒëo b·∫±ng StandardScaler.
        """)

    
    df=chuan_hoa_du_lieu(df)
    
def chia():
    st.subheader("Chia d·ªØ li·ªáu th√†nh t·∫≠p Train, Validation, v√† Test")
    st.write("""
    ### üìå Chia t·∫≠p d·ªØ li·ªáu
    D·ªØ li·ªáu ƒë∆∞·ª£c chia th√†nh ba ph·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o m√¥ h√¨nh t·ªïng qu√°t t·ªët:
    - **70%**: ƒë·ªÉ train m√¥ h√¨nh.
    - **15%**: ƒë·ªÉ validation, d√πng ƒë·ªÉ ƒëi·ªÅu ch·ªânh tham s·ªë.
    - **15%**: ƒë·ªÉ test, ƒë√°nh gi√° hi·ªáu su·∫•t th·ª±c t·∫ø.
    """)
       
    train_test_size()
    
    


def train_multiple_linear_regression(X_train, y_train, learning_rate=0.001, n_iterations=200):
    """Hu·∫•n luy·ªán h·ªìi quy tuy·∫øn t√≠nh b·ªôi b·∫±ng Gradient Descent."""
    
    # Chuy·ªÉn ƒë·ªïi X_train, y_train sang NumPy array ƒë·ªÉ tr√°nh l·ªói
    X_train = X_train.to_numpy() if isinstance(X_train, pd.DataFrame) else X_train
    y_train = y_train.to_numpy().reshape(-1, 1) if isinstance(y_train, (pd.Series, pd.DataFrame)) else y_train.reshape(-1, 1)

    # Ki·ªÉm tra NaN ho·∫∑c Inf
    if np.isnan(X_train).any() or np.isnan(y_train).any():
        raise ValueError("D·ªØ li·ªáu ƒë·∫ßu v√†o ch·ª©a gi√° tr·ªã NaN!")
    if np.isinf(X_train).any() or np.isinf(y_train).any():
        raise ValueError("D·ªØ li·ªáu ƒë·∫ßu v√†o ch·ª©a gi√° tr·ªã v√¥ c√πng (Inf)!")

    # Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·ªÉ tr√°nh tr√†n s·ªë
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)

    # L·∫•y s·ªë l∆∞·ª£ng m·∫´u (m) v√† s·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (n)
    m, n = X_train.shape
    #st.write(f"S·ªë l∆∞·ª£ng m·∫´u (m): {m}, S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (n): {n}")

    # Th√™m c·ªôt bias (x0 = 1) v√†o X_train
    X_b = np.c_[np.ones((m, 1)), X_train]
    #st.write(f"K√≠ch th∆∞·ªõc ma tr·∫≠n X_b: {X_b.shape}")

    # Kh·ªüi t·∫°o tr·ªçng s·ªë ng·∫´u nhi√™n nh·ªè
    w = np.random.randn(X_b.shape[1], 1) * 0.01  
    #st.write(f"Tr·ªçng s·ªë ban ƒë·∫ßu: {w.flatten()}")

    # Gradient Descent
    for iteration in range(n_iterations):
        gradients = (2/m) * X_b.T.dot(X_b.dot(w) - y_train)

        # Ki·ªÉm tra xem gradients c√≥ NaN kh√¥ng
        # st.write(gradients)
        if np.isnan(gradients).any():
            raise ValueError("Gradient ch·ª©a gi√° tr·ªã NaN! H√£y ki·ªÉm tra l·∫°i d·ªØ li·ªáu ho·∫∑c learning rate.")

        w -= learning_rate * gradients

    #st.success("‚úÖ Hu·∫•n luy·ªán ho√†n t·∫•t!")
    #st.write(f"Tr·ªçng s·ªë cu·ªëi c√πng: {w.flatten()}")
    return w
def train_polynomial_regression(X_train, y_train, degree=2, learning_rate=0.001, n_iterations=500):
    """Hu·∫•n luy·ªán h·ªìi quy ƒëa th·ª©c **kh√¥ng c√≥ t∆∞∆°ng t√°c** b·∫±ng Gradient Descent."""

    # Chuy·ªÉn d·ªØ li·ªáu sang NumPy array n·∫øu l√† pandas DataFrame/Series
    X_train = X_train.to_numpy() if isinstance(X_train, pd.DataFrame) else X_train
    y_train = y_train.to_numpy().reshape(-1, 1) if isinstance(y_train, (pd.Series, pd.DataFrame)) else y_train.reshape(-1, 1)

    # T·∫°o ƒë·∫∑c tr∆∞ng ƒëa th·ª©c **ch·ªâ th√™m b·∫≠c cao, kh√¥ng c√≥ t∆∞∆°ng t√°c**
    X_poly = np.hstack([X_train] + [X_train**d for d in range(2, degree + 1)])
    # Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·ªÉ tr√°nh tr√†n s·ªë
    scaler = StandardScaler()
    X_poly = scaler.fit_transform(X_poly)

    # L·∫•y s·ªë l∆∞·ª£ng m·∫´u (m) v√† s·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (n)
    m, n = X_poly.shape
    print(f"S·ªë l∆∞·ª£ng m·∫´u (m): {m}, S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (n): {n}")

    # Th√™m c·ªôt bias (x0 = 1)
    X_b = np.c_[np.ones((m, 1)), X_poly]
    print(f"K√≠ch th∆∞·ªõc ma tr·∫≠n X_b: {X_b.shape}")

    # Kh·ªüi t·∫°o tr·ªçng s·ªë ng·∫´u nhi√™n nh·ªè
    w = np.random.randn(X_b.shape[1], 1) * 0.01  
    print(f"Tr·ªçng s·ªë ban ƒë·∫ßu: {w.flatten()}")

    # Gradient Descent
    for iteration in range(n_iterations):
        gradients = (2/m) * X_b.T.dot(X_b.dot(w) - y_train)

        # Ki·ªÉm tra n·∫øu gradient c√≥ gi√° tr·ªã NaN
        if np.isnan(gradients).any():
            raise ValueError("Gradient ch·ª©a gi√° tr·ªã NaN! H√£y ki·ªÉm tra l·∫°i d·ªØ li·ªáu ho·∫∑c learning rate.")

        w -= learning_rate * gradients

    print("‚úÖ Hu·∫•n luy·ªán ho√†n t·∫•t!")
    print(f"Tr·ªçng s·ªë cu·ªëi c√πng: {w.flatten()}")
    
    return w



# H√†m ch·ªçn m√¥ h√¨nh
def chon_mo_hinh():
    st.subheader("üîç Ch·ªçn m√¥ h√¨nh h·ªìi quy")
    
    # üîπ Kh·ªüi t·∫°o run_name n·∫øu ch∆∞a c√≥
    if 'run_name' not in st.session_state:
        st.session_state['run_name'] = f"run_{np.random.randint(1000, 9999)}"
    
    model_type_V = st.radio("Ch·ªçn lo·∫°i m√¥ h√¨nh:", ["Multiple Linear Regression", "Polynomial Regression"])
    model_type = "linear" if model_type_V == "Multiple Linear Regression" else "polynomial"
    
    n_folds = st.slider("Ch·ªçn s·ªë folds (KFold Cross-Validation):", min_value=2, max_value=10, value=5)
    learning_rate = st.slider("Ch·ªçn t·ªëc ƒë·ªô h·ªçc (learning rate):", 
                          min_value=1e-6, max_value=0.1, value=0.01, step=1e-6, format="%.6f")

    degree = 2
    if model_type == "polynomial":
        degree = st.slider("Ch·ªçn b·∫≠c ƒëa th·ª©c:", min_value=2, max_value=5, value=2)

    fold_mse = []
    scaler = StandardScaler()
    kf = KFold(n_splits=n_folds, shuffle=True, random_state=42)

    # üîπ Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chia hay ch∆∞a
    if "X_train" not in st.session_state or st.session_state["X_train"] is None:
        st.warning("‚ö†Ô∏è Vui l√≤ng chia d·ªØ li·ªáu tr∆∞·ªõc khi hu·∫•n luy·ªán m√¥ h√¨nh!")
        return None, None, None

    X_train, X_test = st.session_state["X_train"], st.session_state["X_test"]
    y_train, y_test = st.session_state["y_train"], st.session_state["y_test"]

    if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
        # üîπ Ki·ªÉm tra v√† thi·∫øt l·∫≠p mlflow_url n·∫øu ch∆∞a c√≥
        if "mlflow_url" not in st.session_state:
            st.session_state["mlflow_url"] = "https://dagshub.com/TonThatTruongVu/TITANIC_APP_Linear.mlflow"

        try:
            with mlflow.start_run(run_name=f"Train_{st.session_state['run_name']}_{model_type}"):

                mlflow.log_param("model_type", model_type)
                mlflow.log_param("n_folds", n_folds)
                mlflow.log_param("learning_rate", learning_rate)
                if model_type == "polynomial":
                    mlflow.log_param("degree", degree)

                for fold, (train_idx, valid_idx) in enumerate(kf.split(X_train, y_train)):
                    X_train_fold, X_valid = X_train.iloc[train_idx], X_train.iloc[valid_idx]
                    y_train_fold, y_valid = y_train.iloc[train_idx], y_train.iloc[valid_idx]

                    if model_type == "linear":
                        w = train_multiple_linear_regression(X_train_fold, y_train_fold, learning_rate=learning_rate)
                        w = np.array(w).reshape(-1, 1)
                        X_valid_b = np.c_[np.ones((len(X_valid), 1)), X_valid.to_numpy()]
                        y_valid_pred = X_valid_b.dot(w)
                    else:  
                        X_train_fold = scaler.fit_transform(X_train_fold)
                        w = train_polynomial_regression(X_train_fold, y_train_fold, degree, learning_rate=learning_rate)
                        w = np.array(w).reshape(-1, 1)
                        X_valid_scaled = scaler.transform(X_valid.to_numpy())
                        X_valid_poly = np.hstack([X_valid_scaled] + [X_valid_scaled**d for d in range(2, degree + 1)])
                        X_valid_b = np.c_[np.ones((len(X_valid_poly), 1)), X_valid_poly]
                        y_valid_pred = X_valid_b.dot(w)

                    mse = mean_squared_error(y_valid, y_valid_pred)
                    fold_mse.append(mse)
                    mlflow.log_metric(f"mse_fold_{fold+1}", mse)
                    print(f"üìå Fold {fold + 1} - MSE: {mse:.4f}")

                avg_mse = np.mean(fold_mse)

                if model_type == "linear":
                    final_w = train_multiple_linear_regression(X_train, y_train, learning_rate=learning_rate)
                    st.session_state['linear_model'] = final_w
                    X_test_b = np.c_[np.ones((len(X_test), 1)), X_test.to_numpy()]
                    y_test_pred = X_test_b.dot(final_w)
                else:
                    X_train_scaled = scaler.fit_transform(X_train)
                    final_w = train_polynomial_regression(X_train_scaled, y_train, degree, learning_rate=learning_rate)
                    st.session_state['polynomial_model'] = final_w
                    X_test_scaled = scaler.transform(X_test.to_numpy())
                    X_test_poly = np.hstack([X_test_scaled] + [X_test_scaled**d for d in range(2, degree + 1)])
                    X_test_b = np.c_[np.ones((len(X_test_poly), 1)), X_test_poly]
                    y_test_pred = X_test_b.dot(final_w)

                test_mse = mean_squared_error(y_test, y_test_pred)

                # üîπ **Log d·ªØ li·ªáu v√†o MLflow**
                mlflow.log_metric("avg_mse", avg_mse)
                mlflow.log_metric("test_mse", test_mse)

                st.success(f"MSE trung b√¨nh qua c√°c folds: {avg_mse:.4f}")
                st.success(f"MSE tr√™n t·∫≠p test: {test_mse:.4f}")
                st.success(f"‚úÖ ƒê√£ log d·ªØ li·ªáu cho **Train_{st.session_state['run_name']}_{model_type}**!")
                st.markdown(f"### üîó [Truy c·∫≠p MLflow DAGsHub]({st.session_state['mlflow_url']})")

        except Exception as e:
            st.error(f"‚ö† L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh: {e}")

        finally:
            mlflow.end_run()

        return final_w, avg_mse, scaler

    return None, None, None


import numpy as np
import streamlit as st


from datetime import datetime
def get_mlflow_runs():
    """L·∫•y danh s√°ch c√°c runs t·ª´ MLflow v√† hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi nh·∫•t"""
    client = mlflow.tracking.MlflowClient()
    experiment_id = "0"  # Thay b·∫±ng ID th·ª±c t·∫ø c·ªßa b·∫°n
    runs = client.search_runs(experiment_id, order_by=["start_time DESC"])

    if not runs:
        return None

    # Chuy·ªÉn ƒë·ªïi danh s√°ch runs th√†nh DataFrame
    run_data = []
    for run in runs:
        start_time_ms = run.info.start_time  # Th·ªùi gian d·∫°ng milliseconds
        start_time_dt = datetime.fromtimestamp(start_time_ms / 1000).strftime("%Y-%m-%d %H:%M:%S")  # Chuy·ªÉn ƒë·ªïi

        run_data.append({
            "Run ID": run.info.run_id,
            "Run Name": run.data.tags.get("mlflow.runName", "Unnamed Run"),
            "Start Time": start_time_dt,  # Hi·ªÉn th·ªã th·ªùi gian ƒë·∫πp h∆°n
            "Status": run.info.status,
            "Accuracy": run.data.metrics.get("accuracy", "N/A"),
            "Test MSE": run.data.metrics.get("test_mse", "N/A"),
            "Prediction Result": run.data.params.get("prediction_result", "N/A")
        })

    return pd.DataFrame(run_data)

def test():
    """Ch·ª©c nƒÉng d·ª± ƒëo√°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
    # Ki·ªÉm tra xem m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u trong session_state ch∆∞a
    model_type = st.selectbox("Ch·ªçn m√¥ h√¨nh:", ["linear", "polynomial"])

    if model_type == "linear" and "linear_model" in st.session_state:
        model = st.session_state["linear_model"]
    elif model_type == "polynomial" and "polynomial_model" in st.session_state:
        model = st.session_state["polynomial_model"]
    else:
        st.warning("M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán.")
        return

    # Nh·∫≠p c√°c gi√° tr·ªã cho c√°c c·ªôt c·ªßa X_train
    X_train = st.session_state.X_train
    num_columns = len(X_train.columns)
    column_names = X_train.columns.tolist()

    st.write(f"Nh·∫≠p c√°c gi√° tr·ªã cho {num_columns} c·ªôt c·ªßa X_train:")

    # T·∫°o c√°c tr∆∞·ªùng nh·∫≠p li·ªáu cho t·ª´ng c·ªôt
    X_train_input = []
    if "mapping_dicts" not in st.session_state:
        st.session_state.mapping_dicts = []

    for i, column_name in enumerate(column_names):
        mapping_dict = next(
            (col["mapping_dict"] for col in st.session_state.mapping_dicts if col["column_name"] == column_name), None
        )

        if mapping_dict:
            value = st.selectbox(f"Gi√° tr·ªã c·ªôt {column_name}", options=list(mapping_dict.keys()), key=f"column_{i}")
            value = int(mapping_dict[value])
        else:
            value = st.number_input(f"Gi√° tr·ªã c·ªôt {column_name}", key=f"column_{i}")

        X_train_input.append(value)

    # Chuy·ªÉn ƒë·ªïi list th√†nh array
    X_train_input = np.array(X_train_input).reshape(1, -1)

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    X_train_input_final = X_train_input.copy()
    scaler = StandardScaler()

    for i in range(X_train_input.shape[1]):
        if X_train_input[0, i] not in [0, 1]:  # N·∫øu gi√° tr·ªã kh√¥ng ph·∫£i 0 ho·∫∑c 1
            X_train_input_final[0, i] = scaler.fit_transform(X_train_input[:, i].reshape(-1, 1)).flatten()

    st.write("D·ªØ li·ªáu sau khi x·ª≠ l√Ω:")

    if st.button("D·ª± ƒëo√°n"):
        # Th√™m c·ªôt 1 cho intercept (n·∫øu c·∫ßn)
        X_input_b = np.c_[np.ones((X_train_input_final.shape[0], 1)), X_train_input_final]
        y_pred = X_input_b.dot(model)  # D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh ƒë√£ l∆∞u

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
        st.write("S·ªêNG" if y_pred >= 0.5 else "CH·∫æT")

        # Hi·ªÉn th·ªã danh s√°ch c√°c runs t·ª´ MLflow
        df_runs = get_mlflow_runs()
        if df_runs is not None:
            st.subheader("üìä C√°c Runs ƒê√£ L∆∞u Trong MLflow")
            st.dataframe(df_runs)

def data():
    uploaded_file = st.file_uploader("üìÇ Ch·ªçn file d·ªØ li·ªáu (.csv ho·∫∑c .txt)", type=["csv", "txt"])
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file, delimiter=",")
            st.success("üìÇ File t·∫£i l√™n th√†nh c√¥ng!")

            # Hi·ªÉn th·ªã l√Ω thuy·∫øt v√† x·ª≠ l√Ω d·ªØ li·ªáu
            hien_thi_ly_thuyet(df)
        except Exception as e:
            st.error(f"‚ùå L·ªói : {e}")
            
import streamlit as st
import mlflow
import os


          
def chon():
    try:
                
        final_w, avg_mse, scaler = chon_mo_hinh()
    except Exception as e:
        st.error(f"L·ªói x·∫£y ra: {e}")
def main():

# Ch·ªçn tab b·∫±ng radio button
    st.title("TITANIC APP LINEAR REGRESSION")
    option = st.radio("Ch·ªçn ch·ª©c nƒÉng:", 
                  ["üìò Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu", "‚öôÔ∏è Hu·∫•n luy·ªán", "üî¢ D·ª± ƒëo√°n",])
    
# Hi·ªÉn th·ªã n·ªôi dung t∆∞∆°ng ·ª©ng
    if option == "üìò Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu":
        data()
    elif option == "‚öôÔ∏è Hu·∫•n luy·ªán":
        chia()
        chon()
    elif option == "üî¢ D·ª± ƒëo√°n":
        test()

    
            

        
if __name__ == "__main__":
    main()
    
        

        


            
  
